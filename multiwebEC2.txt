AWS hosting multiple websites on a single EC2 instance

- Learning Outcomes

1. Provision secondary private IP address and Elastic IP address
	- In order to allow multiple websites or multiple web pages to run on one EC2 instance, we need elastic addresses or the private ip addresses

2. How to get secondary IP recognized by my OS
	- beccause wheen we launch an EC2 instance it is provided with a single public IP and a single private IP
	
3. Create 2 different web pages on Apache server

4. Associating those web pages with our different elastic IP
	- with those elastic IPs we will be making the webage run


	
ELASTIC IP ADDRESS DEFIINITION
	- static IP address that is associated with our EC2 instance
	
	
- when we stop our instance, the public ip of our instance gets lost

USES OF MULTIPLE IP ADDRESSES

- It can be useful to assign multiple IP addresses to an instance in the Virtual Private Cloud to do the following:
	- Host multiple websites on a single server by using multiple SSL (Secure Socket Layer) certificates
	
	- Operate network appliances such as firewalls or load balancers that have multiple IP addresses for each network interface.
	
	- Redirect internal traffic to a standby instance in case your instance fails, by reassiggning the secondary IP address to the standby instance
	
	
FIRST! What is AWS in simple terms

- AWS is a colletion of cloud services that interlock to make complex applications. Use Legos as an analogy

	- EC2 is just one lego piece in the whole Amazon Web Services

What is an EC2 instance? (Elastic Cloud Computing)
 - EC2 instancees are virtual computers hosted in AWS that allow for scalable computing capacity in the AWS cloud.
 
 
 FROM AWS MANAGEMENT CONSOLE THESE ARE THE SPECIFIC REQUIREMENTS FOR APACHE DEPLOYED ON EC2 INSTANCE:
	- Select EC2 -> instsances -> launch instances
	- Select Ubuntu (or Amazon Linux) AMI (Amazon Machine Image) 
		- AMI is a templatee that contains the software configs (OS, application server, and apps) to launch my instance
	- instance type is free tier in this case t2.micro
	- Create key pair 
		- Make sure keypair is in linux if you're using WSL

	- Firewall(security groups)
		- Allow SSH traffic from everywhere 
			-- This rule allows inbound SSH(Secure Shell) traffic to your instances by any IP addresses on the internet
			-- SSH typically used for secure remote access to servers
			-- By allowing SSH traffic from everywhere, any device or user with network access to your AWS instance will be able to establish an SSH connection to it
				- Secure Shell (SSH) traffic refers to network communication using the SSH protocol. 
				- SSH is a cryptographic network protocol that provides secure communication over an unsecured network
				- Widely used for secure remote access to systems and for secure file transfer
					SSH TRAFFIC EXAMPLES:
						- Logging into remote server or VM to perform administrative tasks
						- Transferrinng files securely between systems using tools like SCP (Secure Copy) or SFTP (SSH File Transfer Protocol)
						- Executing commands on a remote system using SSH commands or scripts

		- Allows HTTP traffic from internet
			-- This rule allows inbound HTTP(Hypertext Transfer Protocol) traffic to your instances from any IP address on the internet.
			-- HTTP is the protocol used for weving web bpagess and other web content. 
			-- By allowing HTTP traffic from the internet, your instances will be accessible to web users, allowing them to browse web content hosted on your AWS instances
				HTTP TRAFFIC EXAMPLES:
					- Requesting Web pages: WHen you type a URL iinto your web browswer's address bar or click on a link, your browser sends an HTTP request to the corresponding web server to retrieve the requested web pages
					- Submitting forms: When you fill out and submit a form on a web page, your browser sends an HTTP request to the server containing the form data, and the server responds with an HTTP response confirming the submission or provviding any necessary feedback
					- Loading resources: When a web page loads, the browseer sends multiple HTTP requests to the server to reetrieve all the resources needed to render the page, including HTML, CSS, Javascript, images and multimedia files
					- Downloading files: When you download a file form a website, your browser sennds an HTTP request to the server to retieve the file, and the serveer respons withh the file data, which your browser then downloads and saves to your computer 

	- Launch Instance button - there'll be a link that takes you back to main instance page and I can check the box of my instance and wait for instance state and status check to complete (2/2)
	- Press "Connect" button beacuse we're going to connect to instance using SSH
	
	- CONNECT TO INSTANCE PAGE
		- select "SSH client"
		- open ubuntu terminal if you're using WSL
		- navigate to directory containing the private key. In the steps given on the "connect to instance" page, the actual name of the key is listed
		- run the chmod "${anything}.pem" in my case : chmod 400 "multiWeb.pem"
			- chmod in Unix-like OS is used to change the permissions of the files and directories.
			- "400" is a numeric representation of the permissions
				- "4" = read permission
				- "2" = write permission
				- "1" = execute permission
			- The first digit (4) sets read permission for the owner of the file.
			- The next two digits (00) signify no permissions for the group and others
		- run : ssh -i "multiWeb.pem" ubuntu@ec2-13-59-0-191.us-east-2.compute.amazonaws.com
			- "ssh" : this is the command-line tool that's used to establish a secure shell connection
			- i "multiWeb.pem" : specifies the indentity (private key) to be used for authentication.
				- in this case, the file named "multiWeb.pem"
				- Private key authentication is often used to connect to EC2 instances securely instead of a password
			- ubuntu : the username used to log in to the EC2 instance.
			- ec2-13-59-0-191.us-east-2.compute.amazonaws.com : the public Domain Name System (DNS)

	- CHECK TO SEE IF CONNECTED
		- before running the command my terminal looked like : patrick@Patrick:~$
		- AFTER running the commands my terminal looks like : ubuntu@ip-172-31-14-203:~$
			- this terminal prompt indicates that I have successfully connected to an Amazon Elastic Cloud Computing instance using Secure Shell

	- TIME TO INSTALL APACHE WEB SERVER ON EC2 INSTANCE
		- run : sudo su this switches to root user which means unrestricted access to system files and configs
		- AFTER running sudo su : terminal looks like root@ip-172-31-14-203:/home/ubuntu#
			- root : theh username I'm logged in as. Unrestricted access to all commands and files on the system
			- ip-172-31-14-203 : this is the hostname of the EC2 instance you're connected to. It's showing the internal IP address of the instance
			- /home/ubuntu# : is the working directory, in this case, i'm in the home/ubuntu directory and the "#" denotes root level priviliges
		- since i'm running ubunutu i'd use the command : apt install -y apache2. If i were using Amazon Linux AMI i'd use : yum install -y httpd.x86-64
			- this is due to the different distros of linux, but both commands will use their respective package manager (software tool to automate installation processes) to install an HTTP server
		- systemctl start apache2.service
		- systemctl enable apache2.service
	
	- CHECK TO SEE APACHE2 DEFAULT PAGE
		- go back to instances page and click on the instance and copy public ipv4 address and paste into address bar of browser. 
		- should see the default apache2 page

	- ASSOCIATE MORE PRIVATE IPS WITH MY EC2 INSTANCE
		- Actions -> Networking -> Manage IP addresses
		- click on something like this : eth0: eni-0a24c3654f54cb7d6 - 172.31.0.0/20
		- Assign new IP address
		- click save and let it auto assign

		- cd .. all the way back and cd into etc/netplan
		- open 50-cloud-init.yaml file. Everything below is the commented out section of the file
# This file is generated from information provided by the datasource.  Changes
# to it will not persist across an instance reboot.  To disable cloud-init's
# network configuration capabilities, write a file
# /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:
# network: {config: disabled}

		- configure 50-cloud-init.yaml file. below is what it looks like after configuration
network:
    ethernets:
        eth0:
            dhcp4: true
            dhcp6: false
            addresses: [172.31.14.203/20, 172.31.13.112/20]
            match:
                macaddress: 02:c7:32:ca:75:af
            set-name: eth0
    version: 2
		- the only change was the addresses where I manually put the two addresses from "manage IP addresses" from EC2 webpage in an array with the net mask included

		- At this point I've made my OS recognize my secondary IP

	- ALLOCATING MULTIPLE ELASTIC IPS WITH MY INSTANCE
		- What are elastic IPs
			- Elastic IPs are static (fixed) IPs designed for dynamic cloud computing environments (i.e Amazon Web Services)
		- Good use of elastic IPs
			- When you launch an AWS EC2 instance(a virtual server) its assigned a public IP address by default. HOWEVER, this IP address can change if you stop and restart the instance.
			- Elastic IPs solve this issue because elastic IPs remain associated with that instance AND you can move it from one instance to another easily.

		- First, go to the left side nav bar and go to NETWORK & SECURITY -> Elastic IPs -> Allocate Elastic IP button (top right) -> Allocate (bottom right)

		- Need 2 of these Elastic IPs because I'll be hosting 2 websites on this instance

		- NOTE: clear public ipv4 addresses just below search bar to see the 2 EIPs

		- NEXT: stay on page because we need to associate these EIPs with my EC2 instance
		
		- Highlight 1 IP address then go to actions dropdown on top right -> associate elastic IP

		- Keep resoruce type the same

		- Instance, choose the EC2 instance that you want to associate it with

		- choose one of the private IP addresses (I just ran "ip a" while connected to the instance through ssh to view the private ip addresses)

		- press "associate" button (bottom right)

		- highlight these EIP one by one to check that the private IP is associated. 
	

Taking a tangent to learn about Jenkins which is an open-source automation server
	
	- Widely used for implementing CI/CD pipelines (series of automated steps that changes go through from development to deployment)
		- CI/CD is a practice in software dev where code changes are frequently integrated into a shared repo. Automated tests and deployments are triggered upon these changes.
		NOTE: Jenkins helps in automating the:
			- building
			- testing
			- deployments
		of software applications, enabiling teams to deliver high-quality software more rapdily and reliably
	
- First install Jenkins on EC2 instance
	- refer to this website -- https://www.jenkins.io/doc/book/installing/linux/#debianubuntu

	- NOTE: install Java first since Jenkins is a Java based application and needs a Java Development Kit to be installed on the server where it's running  (just copy the commands)
	- then copy the commands for the weekly release for debian distro

	- the series of commands below were returned when I pasted them into linux terminal

	 openjdk version "17.0.10" 2024-01-16
	OpenJDK Runtime Environment (build 17.0.10+7-Ubuntu-122.04.1)
	OpenJDK 64-Bit Server VM (build 17.0.10+7-Ubuntu-122.04.1, mixed mode, sharing)
	Command 'openjdk' not found, but can be installed with:
	sudo snap install openjdk
	-bash: syntax error near unexpected token `('
	-bash: syntax error near unexpected token `(' 

	- was able to fix using "sudo snap install openjdk"
		- openjdk is open Java Development Kit

	- You can check the status of Jenkins by inputing the commands, "sudo systemctl status jenkins". the example below is what it looks like when Jenkins is running 

	● jenkins.service - Jenkins Continuous Integration Server
     Loaded: loaded (/lib/systemd/system/jenkins.service; enabled; vendor preset: enabled)
     Active: active (running) since Wed 2024-03-27 18:49:30 UTC; 2min 39s ago
   Main PID: 33857 (java)
      Tasks: 39 (limit: 1121)
     Memory: 280.4M
        CPU: 40.572s
     CGroup: /system.slice/jenkins.service
             └─33857 /usr/bin/java -Djava.awt.headless=true -jar /usr/share/java/jenkins.war --webroot=/var/cache/jenki>

Mar 27 18:48:59 ip-172-31-14-203 jenkins[33857]: d89e77182fa24fdb8efa0e71679309e4
Mar 27 18:48:59 ip-172-31-14-203 jenkins[33857]: This may also be found at: /var/lib/jenkins/secrets/initialAdminPasswo>
Mar 27 18:48:59 ip-172-31-14-203 jenkins[33857]: *************************************************************
Mar 27 18:48:59 ip-172-31-14-203 jenkins[33857]: *************************************************************
Mar 27 18:48:59 ip-172-31-14-203 jenkins[33857]: *************************************************************
Mar 27 18:49:30 ip-172-31-14-203 jenkins[33857]: 2024-03-27 18:49:30.395+0000 [id=31]        INFO        jenkins.InitRe>
Mar 27 18:49:30 ip-172-31-14-203 jenkins[33857]: 2024-03-27 18:49:30.434+0000 [id=24]        INFO        hudson.lifecyc>
Mar 27 18:49:30 ip-172-31-14-203 systemd[1]: Started Jenkins Continuous Integration Server.
Mar 27 18:49:30 ip-172-31-14-203 jenkins[33857]: 2024-03-27 18:49:30.593+0000 [id=47]        INFO        h.m.DownloadSe>
Mar 27 18:49:30 ip-172-31-14-203 jenkins[33857]: 2024-03-27 18:49:30.594+0000 [id=47]        INFO        hudson.util.Re>


	- Go back to EC2 instance and select the correct instance,
	- Click on "Security" tab 
	- Click on the instance link itself (will have launch-wizard) at the end of it
	- Will take you to a new page 
	- Edit Inbound rules
		- Type: All TCP (this allows all Transmission Control Protocol from) Source: Anywhere ipv4

	- Reset jenkins server and check status again
		- "sudo systemctl restart jenkins"
		- "sudo systemctl status jenkins"

	- Copy elastic ip and tag ":8080" at the end and you should see the jenkins sign in page
		- :8080 -- the specified port that Jenkins was configured to run on

	- run the command /var/lib/jenkins
	- switch to super user (sudo su) for elevated priviliges and cd into secrets
	- run "nano initialAdminPassword" d89e77182fa24fdb8efa0e71679309e4

	IMPORTANT:  Username - pat 
				Password - Pat_4761
				Full Name - Patrick Abrena
				E-mail Address - patrickabrena@hotmail.com

	- Click next and save and start using Jenkins



	- MAPPING EIP WITH WEBPAGES
		- cd back to top level directory
		- cd into var/www/html 
		- 